# Generated by Django 2.2 on 2019-04-17 07:47

import datetime

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name = 'CheckBoxOption',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('answer_text', models.CharField(max_length = 100)),
            ],
        ),
        migrations.CreateModel(
            name = 'CheckBoxPoll',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('importance', models.IntegerField()),
                ('remaining_time', models.DateTimeField()),
                ('text', models.TextField()),
            ],
            options = {
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name = 'CheckBoxPollAnswer',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
            ],
        ),
        migrations.CreateModel(
            name = 'City',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('name', models.CharField(max_length = 50)),
            ],
        ),
        migrations.CreateModel(
            name = 'Code4Digit',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('phone_number', models.CharField(max_length = 11)),
                ('code', models.CharField(max_length = 4)),
            ],
        ),
        migrations.CreateModel(
            name = 'LinearScalePoll',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('importance', models.IntegerField()),
                ('remaining_time', models.DateTimeField()),
                ('text', models.TextField()),
                ('choices_count', models.IntegerField()),
                ('start', models.IntegerField()),
                ('step', models.IntegerField()),
            ],
            options = {
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name = 'LinearScalePollAnswer',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('answer', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name = 'MultipleChoiceAnswer',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
            ],
        ),
        migrations.CreateModel(
            name = 'MultipleChoiceOption',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('answer_text', models.CharField(max_length = 100)),
            ],
        ),
        migrations.CreateModel(
            name = 'MultipleChoicePoll',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('importance', models.IntegerField()),
                ('remaining_time', models.DateTimeField()),
                ('text', models.TextField()),
            ],
            options = {
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name = 'ParagraphPoll',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('importance', models.IntegerField()),
                ('remaining_time', models.DateTimeField()),
                ('text', models.TextField()),
            ],
            options = {
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name = 'ParagraphPollAnswer',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('answer_text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name = 'ShopKind',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('name', models.CharField(max_length = 50)),
            ],
        ),
        migrations.CreateModel(
            name = 'ShortAnswerPoll',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('importance', models.IntegerField()),
                ('remaining_time', models.DateTimeField()),
                ('text', models.TextField()),
            ],
            options = {
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name = 'ShortAnswerPollAnswer',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('answer_text', models.CharField(max_length = 100)),
            ],
        ),
        migrations.CreateModel(
            name = 'Customer',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('password', models.CharField(max_length = 128, verbose_name = 'password')),
                ('last_login', models.DateTimeField(blank = True, null = True, verbose_name = 'last login')),
                ('is_superuser', models.BooleanField(default = False,
                                                     help_text = 'Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name = 'superuser status')),
                ('username',
                 models.CharField(error_messages = { 'unique': 'A user with that username already exists.' },
                                  help_text = 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                  max_length = 150, unique = True,
                                  validators = [django.contrib.auth.validators.UnicodeUsernameValidator()],
                                  verbose_name = 'username')),
                ('first_name', models.CharField(blank = True, max_length = 30, verbose_name = 'first name')),
                ('last_name', models.CharField(blank = True, max_length = 150, verbose_name = 'last name')),
                ('email', models.EmailField(blank = True, max_length = 254, verbose_name = 'email address')),
                ('is_staff', models.BooleanField(default = False,
                                                 help_text = 'Designates whether the user can log into this admin site.',
                                                 verbose_name = 'staff status')),
                ('is_active', models.BooleanField(default = True,
                                                  help_text = 'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name = 'active')),
                (
                'date_joined', models.DateTimeField(default = django.utils.timezone.now, verbose_name = 'date joined')),
                ('birth_date', models.DateField(blank = True, null = True)),
                ('gender', models.CharField(blank = True, choices = [('m', 'Male'), ('f', 'Female')], max_length = 1,
                                            null = True)),
                ('location', models.CharField(blank = True, max_length = 100, null = True)),
                ('phone_number', models.CharField(max_length = 13, unique = True)),
                ('checkbox_poll_answers',
                 models.ManyToManyField(through = 'Tick_server.CheckBoxPollAnswer', to = 'Tick_server.CheckBoxOption')),
                ('city', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.CASCADE,
                                           to = 'Tick_server.City')),
                ('groups', models.ManyToManyField(blank = True,
                                                  help_text = 'The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name = 'user_set', related_query_name = 'user',
                                                  to = 'auth.Group', verbose_name = 'groups')),
                ('linear_scale_poll_answers', models.ManyToManyField(through = 'Tick_server.LinearScalePollAnswer',
                                                                     to = 'Tick_server.LinearScalePoll')),
                ('multiple_choice_poll_answers', models.ManyToManyField(through = 'Tick_server.MultipleChoiceAnswer',
                                                                        to = 'Tick_server.MultipleChoiceOption')),
                ('paragraph_poll_answers',
                 models.ManyToManyField(through = 'Tick_server.ParagraphPollAnswer', to = 'Tick_server.ParagraphPoll')),
                ('short_answer_poll_answers', models.ManyToManyField(through = 'Tick_server.ShortAnswerPollAnswer',
                                                                     to = 'Tick_server.ShortAnswerPoll')),
                ('user_permissions',
                 models.ManyToManyField(blank = True, help_text = 'Specific permissions for this user.',
                                        related_name = 'user_set', related_query_name = 'user', to = 'auth.Permission',
                                        verbose_name = 'user permissions')),
            ],
            options = {
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers = [
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name = 'shortanswerpollanswer',
            name = 'customer',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'short_answer_poll_answer', to = settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name = 'shortanswerpollanswer',
            name = 'poll',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'short_answer_poll_answer', to = 'Tick_server.ShortAnswerPoll'),
        ),
        migrations.CreateModel(
            name = 'Shop',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('address', models.TextField(blank = True)),
                ('business_license', models.ImageField(blank = True, upload_to = '')),
                ('location', models.CharField(max_length = 50)),
                ('name', models.CharField(max_length = 50)),
                ('picture', models.ImageField(blank = True, upload_to = '')),
                ('shop_kind', models.ManyToManyField(related_name = 'shop', to = 'Tick_server.ShopKind')),
            ],
        ),
        migrations.AddField(
            model_name = 'paragraphpollanswer',
            name = 'customer',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'paragraph_poll_answer', to = settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name = 'paragraphpollanswer',
            name = 'poll',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'paragraph_poll_answer', to = 'Tick_server.ParagraphPoll'),
        ),
        migrations.AddField(
            model_name = 'multiplechoiceoption',
            name = 'poll',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      to = 'Tick_server.MultipleChoicePoll'),
        ),
        migrations.AddField(
            model_name = 'multiplechoiceanswer',
            name = 'customer',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'multiple_choice_answer', to = settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name = 'multiplechoiceanswer',
            name = 'option',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'multiple_choice_answer', to = 'Tick_server.MultipleChoiceOption'),
        ),
        migrations.AddField(
            model_name = 'linearscalepollanswer',
            name = 'customer',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'linear_scale_poll_answer', to = settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name = 'linearscalepollanswer',
            name = 'poll',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'linear_scale_poll_answer', to = 'Tick_server.LinearScalePoll'),
        ),
        migrations.CreateModel(
            name = 'Discount',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('active', models.BooleanField(default = False)),
                ('code', models.CharField(max_length = 5)),
                ('description', models.TextField(blank = True)),
                ('expire_date',
                 models.DateField(default = datetime.datetime(2019, 4, 17, 7, 47, 38, 400016, tzinfo = utc))),
                ('percent', models.IntegerField(default = 5)),
                ('product_brand', models.CharField(max_length = 50, null = True)),
                ('product_id', models.CharField(max_length = 50, null = True)),
                ('product_name', models.CharField(max_length = 50, null = True)),
                ('product_barcode', models.ImageField(null = True, upload_to = '')),
                ('customer', models.ForeignKey(on_delete = django.db.models.deletion.CASCADE, related_name = 'discount',
                                               to = settings.AUTH_USER_MODEL)),
                ('shop', models.ForeignKey(on_delete = django.db.models.deletion.CASCADE, related_name = 'discount',
                                           to = 'Tick_server.Shop')),
            ],
        ),
        migrations.AddField(
            model_name = 'checkboxpollanswer',
            name = 'customer',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'checkbox_poll_answer', to = settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name = 'checkboxpollanswer',
            name = 'option',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE,
                                      related_name = 'checkbox_poll_answer', to = 'Tick_server.CheckBoxOption'),
        ),
        migrations.AddField(
            model_name = 'checkboxoption',
            name = 'poll',
            field = models.ForeignKey(on_delete = django.db.models.deletion.CASCADE, to = 'Tick_server.CheckBoxPoll'),
        ),
        migrations.CreateModel(
            name = 'Branch',
            fields = [
                ('id',
                 models.AutoField(auto_created = True, primary_key = True, serialize = False, verbose_name = 'ID')),
                ('name', models.CharField(max_length = 50)),
                ('shop', models.ForeignKey(on_delete = django.db.models.deletion.CASCADE, to = 'Tick_server.Shop')),
            ],
        ),
    ]
